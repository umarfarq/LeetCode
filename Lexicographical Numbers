386. Lexicographical Numbers
Given an integer n, return all the numbers in the range [1, n] sorted in lexicographical order.

You must write an algorithm that runs in O(n) time and uses O(1) extra space. 

 

Example 1:

Input: n = 13
Output: [1,10,11,12,13,2,3,4,5,6,7,8,9]
Example 2:

Input: n = 2
Output: [1,2]
 

Constraints:

1 <= n <= 5 * 104

Solution :

class Solution {
    public List<Integer> lexicalOrder(int n) {
          List<Integer> result = new ArrayList<>();
        int curr = 1;
        for (int i = 0; i < n; i++) {
            result.add(curr);
            if (curr * 10 <= n) {
                // Try to go to the next deeper level
                curr *= 10;
            } else {
                // Move to the next sibling or go back up the tree
                if (curr >= n) curr /= 10;
                curr++;
                // Skip any trailing zeroes (e.g., move from 19 -> 2 instead of 20)
                while (curr % 10 == 0) curr /= 10;
            }
        }
        return result;
    }
}
