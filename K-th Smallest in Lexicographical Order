 K-th Smallest in Lexicographical Order

Given two integers n and k, return the kth lexicographically smallest integer in the range [1, n].

Example 1:
Input: n = 13, k = 2
Output: 10
Explanation: The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.

Example 2:
Input: n = 1, k = 1
Output: 1
 

Constraints:

1 <= k <= n <= 109

Solution :

public class Solution {
    public int findKthNumber(int n, int k) {
        int curr = 1;  // Start with 1 (the smallest lexicographical number)
        k--;  // As we start with 1, we decrement k by 1 to handle it properly
        
        while (k > 0) {
            long steps = countSteps(n, curr, curr + 1);  // Count the steps between curr and curr+1
            if (steps <= k) {
                // If the steps between curr and curr + 1 are less than or equal to k, move to the next sibling
                curr++;
                k -= steps;
            } else {
                // Otherwise, go deeper into the current subtree
                curr *= 10;
                k--;
            }
        }
        
        return curr;
    }
    
    // Count how many numbers exist between curr and next in the lexicographical order
    private long countSteps(int n, long curr, long next) {
        long steps = 0;
        while (curr <= n) {
            steps += Math.min(n + 1, next) - curr;
            curr *= 10;
            next *= 10;
        }
        return steps;
    }
    
    public static void main(String[] args) {
        Solution solution = new Solution();
        
        // Example 1
        System.out.println(solution.findKthNumber(13, 2));  // Output: 10
        
        // Example 2
        System.out.println(solution.findKthNumber(1, 1));   // Output: 1
    }
}
